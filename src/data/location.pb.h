// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#ifndef PROTOBUF_location_2eproto__INCLUDED
#define PROTOBUF_location_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace xplane {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_location_2eproto();
void protobuf_InitDefaults_location_2eproto();
void protobuf_AssignDesc_location_2eproto();
void protobuf_ShutdownFile_location_2eproto();

class Location;

// ===================================================================

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xplane.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static const Location* internal_default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location* other);
  void UnsafeMergeFrom(const Location& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional double lat = 3;
  void clear_lat();
  static const int kLatFieldNumber = 3;
  double lat() const;
  void set_lat(double value);

  // optional double lon = 4;
  void clear_lon();
  static const int kLonFieldNumber = 4;
  double lon() const;
  void set_lon(double value);

  // optional double alt = 5;
  void clear_alt();
  static const int kAltFieldNumber = 5;
  double alt() const;
  void set_alt(double value);

  // @@protoc_insertion_point(class_scope:xplane.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  double lat_;
  double lon_;
  double alt_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_location_2eproto_impl();
  friend void  protobuf_AddDesc_location_2eproto_impl();
  friend void protobuf_AssignDesc_location_2eproto();
  friend void protobuf_ShutdownFile_location_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Location> Location_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// optional string id = 1;
inline void Location::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::id() const {
  // @@protoc_insertion_point(field_get:xplane.Location.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xplane.Location.id)
}
inline void Location::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xplane.Location.id)
}
inline void Location::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xplane.Location.id)
}
inline ::std::string* Location::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:xplane.Location.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_id() {
  // @@protoc_insertion_point(field_release:xplane.Location.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:xplane.Location.id)
}

// optional string ip = 2;
inline void Location::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::ip() const {
  // @@protoc_insertion_point(field_get:xplane.Location.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xplane.Location.ip)
}
inline void Location::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xplane.Location.ip)
}
inline void Location::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xplane.Location.ip)
}
inline ::std::string* Location::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:xplane.Location.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_ip() {
  // @@protoc_insertion_point(field_release:xplane.Location.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:xplane.Location.ip)
}

// optional double lat = 3;
inline void Location::clear_lat() {
  lat_ = 0;
}
inline double Location::lat() const {
  // @@protoc_insertion_point(field_get:xplane.Location.lat)
  return lat_;
}
inline void Location::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:xplane.Location.lat)
}

// optional double lon = 4;
inline void Location::clear_lon() {
  lon_ = 0;
}
inline double Location::lon() const {
  // @@protoc_insertion_point(field_get:xplane.Location.lon)
  return lon_;
}
inline void Location::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:xplane.Location.lon)
}

// optional double alt = 5;
inline void Location::clear_alt() {
  alt_ = 0;
}
inline double Location::alt() const {
  // @@protoc_insertion_point(field_get:xplane.Location.alt)
  return alt_;
}
inline void Location::set_alt(double value) {
  
  alt_ = value;
  // @@protoc_insertion_point(field_set:xplane.Location.alt)
}

inline const Location* Location::internal_default_instance() {
  return &Location_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xplane

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_location_2eproto__INCLUDED
